JavaScript is a synchronous, single threaded language. It has one call stack and can do one thing at a time. This call stack is present in javascript engine.

```
function a() {
    console.log("a");
}

a();
console.log("end");
```


Whenever a javascript code is executed, a GEC is created and pushed into the call stack.

CALL STACK
        ------------[GEC]
|       |   |
|       V   |
|           |
|           |
|           |
|           |
|           |     
|           |
|---------- |     
|   GEC     |
------------     


Now, it reads and executs the code in GEC line by line. 

It encounters function a() {...} => Memory is allocated. 

It encounters a(). A new execution context is created and pushed.
    
         ------------[a()]
|        |  |
|        V  |
|           |
|           |
|           |
|           |
|---------- |     
|    a()    |
|---------- |     
|   GEC     |
------------        

Now, a() is executed line by line, and prints "a".

a() is popped
    
console.log("end")

GEC is popped.



Call stack waits for nothing whatever is pushed into the stack. It executes it immediately. But what if we want to execute something after some time. Then, we cant use call stack for that because it does has any timer.


 call stack is in javascript engine and javascript engine is in browser. Browser has many other features like timer, bluetooth, location, local storage, etc. These are called Web API.

 Browser allows us to access these features in the call stack via Global Object .

Web API: (via Window object)

* setTimeout
* DOM API (ex- getElementById etc)
* fetch()
* localStorage
* console
* location




```
console.log("start");

setTimeout(function cb() {
    console.log("callback");
},5000);

console.log("end");

```

-> GEC is pushed in callstack
-> console.log("start") => console api is called via window object

-> setTimeout(function cb() {...},5000);
        |
        --> a timer of 5s is set via setTimeout api and cb() is stored/registered in some memory (Web API environment). 

        -> cb() is not pushed in callstack yet.

-> console.log("end"); => console api is called via window object.

[GEC] is popped
=>Call stack empty

CALL STACK
        
|           |
|           |
|           |
|           |
|           |
|           |
|           |     
|           |
|           |     
|           |
------------     



timer of 5s is over---> Now, cb() is pushed in =="callback queue"==

CALL BACK QUEUE
--------------------------------------
|       |
| cb()  |
|       |
--------------------------------------



=> Event Loop is like a gatekeeper, It checks if there is something in the callback queue, it pushes it into the stack. 



CALL STACK
        
|           |
|           |
|           |
|           |
|           |
|           |
|           |     
|           |
|---------- |     
|    cb()   |----------> console API
------------   
        /\    
        |                                     Web Api Environment   
        |
        |                                     Timer=5s  
    EVENT LOOP                                Memory -> cb()                
        /\    
        |                                     Timer=0s => cb()---------- 
        |                                                               |
        |                                                               |
        |                                                               |
        |         CALL BACK QUEUE                                       |
        |       --------------------------------------                  |
        ------->|       |                                cb() push<-----|
                | cb()  |
                |       |
                --------------------------------------

=> Now, cb() is pushed into the stack and executed.




EventListeners

In case of EventListeners, DOM API attaches a "Click" event to the registered call back function (in web api environment).
So, until and unless we click on a btn it will keep on hearing for the event i.e, it will hold onto the memory space of registered call back function.
Therefore, we need to remove event listeners manually.

If we click btn multiple times, then cb() will be pushed into queue as many times and will be popped one by one.








fetch()=> It is used to make a network request call and returns a "promise".

```
console.log("start");

setTimeout(function cbT() {
    console.log("CB setTimeout");
},5000);

fetch("https://api.netflix.com")
.then(function cbF() {
    console.log("CB Netflix");
}); //executes call back when promise is resolved
.
.
.
//100 lines of code

console.log("end");

```


-> [GEC] is pushed 
-> console.log("start"); => start

-> setTimeout(function cbT() {...},5000);
        |
        --> a timer of 5s is set via setTimeout api and cb() is stored/registered in some memory (Web API environment). 

-> fetch() => When promise is resolved, a callback cbF() is called, it is also stored/registered in some memory (Web API environment). 

-> console.log("end"); => end


Now, we have 2 callbacks. Say, netflix server is fast so it returned the data in 5ms. So now which call back will be executed first?

=> There exists one more queue called Micro-task queue. It has higher priority than the call back queue.

What can go in Microtask queue?

-> All the callbacks which come through promises
-> Mutation Observer


All other callbacks goes into callback queue.


CALL STACK
        
|           |
|           |
|           |
|           |
|           |                                                   
|           |
|           |     
|           |
|---------- |     
|    cb()   |----------> console API
------------   
        /\    
        |                                     Web Api Environment   
        |                                         Memory-> cbT() {timer=5s}, cbF() {time taken=5ms}
        |    
    EVENT LOOP                                                 
        /\    
        |               MICRO-TASK QUEUE                                     |
        |           --------------------------------------                   |
        ------->    |       |                                cbF() push<-----|
        |           | cbF() |
        |           |       |
        |           --------------------------------------                  
        |                                                               |
        |                                                               |
        |                                                               |
        |         CALL BACK QUEUE                                       |
        |       --------------------------------------                  |
        ------->|       |                               cbT() push<-----|
                | cbT() |
                |       |
                --------------------------------------

Console
    start 
    end
    CB Netflix
    CB setTimeout








IMPORTANT-

How does it matter if we delay for setTimeout would be 0ms. Then callback will move to queue without any wait? 

No, there are trust issues with setTimeout() ðŸ˜…. The callback function needs to wait until the Call Stack is empty. So the 0 ms callback might have to wait for 100ms also if the stack is busy.  It's a very beautiful concept, and I've covered this in detail in the next episode of Namaste JavaScript.
 
YES, If delay for setTimeout is 0 ms, a callback will be registered with 0 ms timeout and will immediately be pushed into the callback queue. However, the event loop will only move it to the JS call stack after it becomes empty. Hence, you can use setTimeout with 0ms wait time to defer a callback execution.


When does the event loop actually start?

 - Event loop, as the name suggests, is a single-thread, loop that is `almost infinite`. It's always running and doing its job.


Are only asynchronous web API callbacks are registered in the web API environment? 

- YES, the synchronous callback functions like what we pass inside map, filter, and reduce aren't registered in the Web API environment. It's just those async callback functions that go through all this.


Does the web API environment stores only the callback function and pushes the same callback to queue/microtask queue?

 - Yes, the callback functions are stored, and a reference is scheduled in the queues. Moreover, in the case of event listeners(for example click handlers), the original callbacks stay in the web API environment forever, that's why it's advised to explicitly remove the listeners when not in use so that the garbage collector does its job.