
-------------------------------------------------------------
getName();
console.log(x);

var x = 7;
function getName() {
 console.log("Namaste Javascript");
}

------------------------------
Output: Namaste Javascript
        undefined
--------------------------------------------------------------

It should have been an outright error in many other languages, as it is not possible to even access something which is not even created (defined) yet. 
However, JS executed the function and printed undefined

We know that in memory creation phase it assigns undefined and puts the content of function to memory. 

Now it goes line by line in code execution phase. 

It encounters getName() -> Stack frame created and executed.

It encounters console.log(x); -> Currently in variable environment x's value is undefined therefore, it prints undefined.

It encounters x=7 -> Now, it assigns x=7;

and so on.



If "getName" is declared as an arrow function (var getName = () => {...}) or like this,

var getName = function () {
 ...
}

then "getName" is just like any other variable. i.e, it is assigned undefined in memory creation phase rather than copying function code.

Therefore, 
----------------------------------------------------------------
console.log(getName) //output: undefined

getName(); //output: Uncaught TypeError: getName is not a function

var getName = () => {
 console.log("Hello!");
}
----------------------------------------------------------------------------


When you see var a = 2;, you probably think of that as one statement. But JavaScript actually thinks of it as two statements: "var a;" and "a = 2;". The first statement, the declaration, is processed during the compilation phase. The second statement, the assignment, ===is left in place=== for the execution phase.

```
console.log( a );

var a = 2;
```

This is interpreted as- 

```
var a;

console.log( a );

a=2;

```

Note: Only the declarations themselves are hoisted, while any assignments or other executable logic are left in place.


foo();

function foo() {
	console.log( a ); // undefined

	var a = 2;
}


interpreted as-

function foo() {
	var a;

	console.log( a ); // undefined

	a = 2;
}

foo();



Function declarations are hoisted, as we just saw. But function expressions are not.

foo(); // not ReferenceError, but TypeError!

var foo = function bar() {
	// ...
};

The variable identifier foo is hoisted and attached to the enclosing scope (global) of this program, so foo() doesn't fail as a ReferenceError. But foo has no value yet (as it would if it had been a true function declaration instead of expression). So, foo() is attempting to invoke the undefined value, which is a TypeError illegal operation.



NOTE: 

Functions are hoisted before the variables.

Both function declarations and variable declarations are hoisted. But a subtle detail (that can show up in code with multiple "duplicate" declarations) is that functions are hoisted first, and then variables.

```
foo(); // 1

var foo;

function foo() {
	console.log( 1 );
}

foo = function() {
	console.log( 2 );
};
```

1 is printed instead of 2! This snippet is interpreted by the Engine as:

```
function foo() {
	console.log( 1 );
}

foo(); // 1

foo = function() {
	console.log( 2 );
};
```

Notice that var foo was the duplicate (and thus ignored) declaration, even though it came before the function foo()... declaration, because function declarations are hoisted before normal variables.

While multiple/duplicate var declarations are effectively ignored, subsequent function declarations ===do override previous functions===.